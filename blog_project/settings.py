"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url 
from dotenv import load_dotenv
import cloudinary_storage

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Function to configure environment (development or production)
def configure_environment(environment):
    """
    Configure Django settings based on the environment.
    
    Args:
        environment (str): Either 'development' or 'production'
    
    Returns:
        dict: Dictionary with environment-specific settings
    """
    config = {
        'debug': True,
        'whitenoise_enabled': False,
        'static_storage': 'django.contrib.staticfiles.storage.StaticFilesStorage',
        'secure_ssl_redirect': False,
        'session_cookie_secure': False,
        'csrf_cookie_secure': False,
        'secure_browser_xss_filter': False,
        'secure_content_type_nosniff': False,
        'x_frame_options': 'SAMEORIGIN',
    }
    
    if environment.lower() == 'production':
        config.update({
            'debug': False,
            'static_storage': 'cloudinary_storage.storage.StaticCloudinaryStorage',
            'secure_ssl_redirect': True,
            'session_cookie_secure': True,
            'csrf_cookie_secure': True,
            'secure_browser_xss_filter': True,
            'secure_content_type_nosniff': True,
            'x_frame_options': 'DENY',
        })
    
    return config


# ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'development')
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'production')
env_config = configure_environment(ENVIRONMENT)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-8=l2$w^s57g2k#h-0*4n1*f#c=_4t2(pjtm6x4_^8!a0tx@u^y')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_config['debug']

# ALLOWED_HOSTS = ['*']  # Configure this appropriately in production
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'fa3-blog.onrender.com',
    'www.fa3-blog.onrender.com',
    '13.228.225.19',
    '18.142.128.26',
    '54.254.162.138'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "crispy_forms",
    "crispy_bootstrap5",
    'author',
    'posts',
    'categories',
    'home',
    'ckeditor',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware' if env_config['whitenoise_enabled'] else '',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Remove empty middleware values
MIDDLEWARE = [m for m in MIDDLEWARE if m]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Base url to serve media files
MEDIA_URL = '/media/'

# Path where media is stored (for local development fallback)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Ensure the media directory exists
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Configure WhiteNoise for static files in production, but not for media files
if not DEBUG:
    STATICFILES_STORAGE = env_config['static_storage']
    # Explicitly set media files to use Cloudinary in production
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
else:
    # In development, use default file storage
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use dj-database-url to handle database configurations
# This will look for DATABASE_URL in environment variables
database_url = os.environ.get('DATABASE_URL')

if database_url:
    # If DATABASE_URL is provided, use it directly
    DATABASES = {
        'default': dj_database_url.config(default=database_url, conn_max_age=600)
    }
elif ENVIRONMENT.lower() == 'production':
    # Production: Railway internal PostgreSQL connection
    db_pass = os.environ.get('DB_PASS')
    if db_pass:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'railway',
                'USER': 'postgres',
                'PASSWORD': db_pass,
                'HOST': 'maglev.proxy.rlwy.net',
                'PORT': '17987',
            }
        }
    else:
        # Fallback to SQLite if DB_PASS is not available
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Development: default to SQLite if no external database URL is provided
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# CKEditor Upload Path
CKEDITOR_UPLOAD_PATH = 'uploads/'
CKEDITOR_IMAGE_BACKEND = "pillow"

# CKEditor Configuration
CKEDITOR_CONFIGS = {
    'default': {
        'skin': 'moono-lisa',
        'toolbar_Basic': [
            ['Source', '-', 'Bold', 'Italic']
        ],
        'toolbar_Full': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Flash', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['Smiley', 'SpecialChar'], ['Source'],
            ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],
            ['NumberedList','BulletedList'],
            ['Indent','Outdent'],
            ['Maximize'],
        ],
        'toolbar': 'Full',
        'height': 300,
        'width': '100%',
        'filebrowserWindowHeight': 725,
        'filebrowserWindowWidth': 940,
        'toolbarCanCollapse': True,
        'mathJaxLib': '//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js?config=TeX-AMS_HTML',
        'tabSpaces': 4,
        'extraPlugins': ','.join([
            'uploadimage',
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    }
}

CLOUDINARY_STORAGE = {
    'CLOUDINARY_URL': os.getenv('CLOUDINARY_URL', "cloudinary://228944556196295:4-he4Nls7J274KDH1AgDZ-ujt2M@duoovd5y9"),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Security Settings
SECURE_SSL_REDIRECT = env_config['secure_ssl_redirect']
SESSION_COOKIE_SECURE = env_config['session_cookie_secure']
CSRF_COOKIE_SECURE = env_config['csrf_cookie_secure']
SECURE_BROWSER_XSS_FILTER = env_config['secure_browser_xss_filter']
SECURE_CONTENT_TYPE_NOSNIFF = env_config['secure_content_type_nosniff']
X_FRAME_OPTIONS = env_config['x_frame_options']
